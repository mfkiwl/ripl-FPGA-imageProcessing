-- RIPL labelled BNF.
-- Rathlin Image Processing Language, Part of the Rathlin project.
--
-- Usage: $ bnfc -m -haskell RIPL.cf
-- Generates:
--  * Abstract syntax implementation in Haskell
--  * Happy parser generator
--  * Alex lexer generator
--  * pretty printer in Haskell
--  * LaTeX file containing readable language spec

--------------------------------------------
-- RIPL program structure

comment "/*" "*/" ;
comment "//";

entrypoints Program ;

ProgramC. Program ::= [Include] [Function] ImageIn [Assignment] DataOut ;

IncludeFile. Include ::= "#include" "<" Ident ".ripl" ">" ;
separator Include ";" ;

FunctionC. Function ::= "let" Ident [FunArg] "=" [Assignment] Idents ";" ;
FunArgExprC. FunArg ::= Exp ;

separator FunArg "" ;
separator Function "" ;

ImageInC. ImageIn ::= Ident "=" "imread" Integer Integer ";" ;

AssignSkelC. Assignment ::= Idents "=" AssignSkelRHS ;
AssignFunCallC. Assignment ::= Idents "=" FunCallRHS ;
DataOutC. DataOut ::= "out" Ident ";" ;

FunCall. FunCallRHS ::= Ident [FunArg] ;

MapSkel. AssignSkelRHS ::= "map" Ident OneVarFun ;
ZipWithSkel. AssignSkelRHS ::= "zipWith" [IdentSpaceSep] ManyVarFun ;
ZipWithScalarSkel. AssignSkelRHS ::= "zipWith" Ident "[" Exp ".." "]" TwoVarFun ;
-- ZipWithScalarSkel. AssignSkelRHS ::= "zipWithScalar" [IdentSpaceSep] TwoVarFun ;
-- ZipWithVectorSkel. AssignSkelRHS ::= "zipWithVector" [IdentSpaceSep] TwoVarFun ;
ScanSkel. AssignSkelRHS ::= "scan" Ident Integer TwoVarFun ;
FoldScalarSkel. AssignSkelRHS ::= "foldScalar" Ident Integer TwoVarFun ;
FoldVectorSkel. AssignSkelRHS ::= "foldVector" Ident Integer Integer TwoVarFun ;
ScaleSkel. AssignSkelRHS ::= "scale" "(" Exp "," Exp ")" Ident;
SplitXSkel. AssignSkelRHS ::= "splitX" "(" Exp "," Exp ")" Ident ;
SplitYSkel. AssignSkelRHS ::= "splitY" "(" Exp "," Exp ")" Ident ;
Stencil1DSkel. AssignSkelRHS ::= "stencil" Ident "(" Integer "," Integer ")" Stencil1DFun ;
Stencil2DSkel. AssignSkelRHS ::= "stencil" Ident "(" Integer "," Integer ")" Stencil2DFun ;

OneVarFunC.   OneVarFun ::= "(" "\\" Ident "->" Exp ")" ;
TwoVarFunC.   TwoVarFun ::= "(" "\\" Ident Ident "->" Exp ")" ;
ManyVarFunC. ManyVarFun ::= "(" "\\" [ExpSpaceSep] "->" Exp ")" ;
IdentSpaceSepC. IdentSpaceSep ::= Ident ;
separator IdentSpaceSep "" ;

Stencil1DFunC. Stencil1DFun ::= "(" "\\" "[.]" "(" Ident "," Ident ")" "->" Exp ")" ;
Stencil2DFunC. Stencil2DFun ::= "(" "\\" [Ident] "(" Ident "," Ident ")" "->" Exp ")" ;

ExpSpaceSepC. ExpSpaceSep ::= Exp ;
separator ExpSpaceSep "" ;

-- separator nonempty Var " " ;

-- VarListC. VarList ::= "[" [Var] "]" ;

IdentsOneId. Idents ::= Ident;
IdentsManyIds. Idents ::= "(" [Ident] ")";
separator nonempty Ident "" ;

ExprIntNeg. Exp ::= "-" Integer ;
ExprInt. Exp ::= Integer ;
ExprVar. Exp ::= Var ;
ExprIndexHere. Exp ::= "[.]";
ExprIndex. Exp ::= "[" VectorIndex "]" ;
ExprIndexedVector. Exp ::= Ident "[" Exp "]" ;
ExprListExprs. Exp ::= ExprList ;
ExprAdd. Exp ::= Exp "+" Exp ;
ExprMinus. Exp ::= Exp "-" Exp ;
ExprMul. Exp ::= Exp "*" Exp ;
ExprDiv. Exp ::= Exp "/" Exp ;
ExprShiftR. Exp ::= Exp ">>" Exp ;
ExprShiftL. Exp ::= Exp "<<" Exp ;
ExprMod. Exp ::= Exp "%" Exp ;
ExprAbs. Exp ::= "abs" Exp ;
ExprMin. Exp ::= "min" Exp Exp ;
ExprMax. Exp ::= "max" Exp Exp ;
ExprGT. Exp ::= Exp ">" Exp ;
ExprGTE. Exp ::= Exp ">=" Exp ;
ExprLT. Exp ::= Exp "<" Exp ;
ExprLTE. Exp ::= Exp "<=" Exp ;
ExprEq. Exp ::= Exp "==" Exp ;
ExprIfThenElse. Exp ::= "if" Exp "then" Exp "else" Exp ;
ExprBracketed. Exp ::= "(" Exp ")" ;
ExprsBracketed. Exp ::= "(" [Exp] ")" ;
ExprUndefined. Exp ::= "undefined" ;

ExprRepeatTokensC. ExprList ::= "repeatPixel" Exp Exp ;
ExprListC. ExprList ::= "[" [Exp] "]" ;

-- a special expression for foldVector, e.g.
-- (\pixel hist -> hist[pixel]++)
ExprVectorMod. Exp ::= Ident "[" Exp "]" VectorModifier ;
VectorModIncr. VectorModifier ::= "++";
VectorModDecr. VectorModifier ::= "--";


VarC. Var ::= Ident ;

IndexPlus. VectorIndex ::= "." "+" Integer ;
IndexCenter. VectorIndex ::= "."  ;
IndexMinus. VectorIndex ::= "." "-" Integer ;

-- separator nonempty Var "," ;
terminator Assignment ";" ;
separator Exp "," ;