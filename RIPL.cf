-- RIPL labelled BNF.
-- Rathlin Image Processing Language, Part of the Rathlin project.
--
-- Usage: $ bnfc -m -haskell RIPL.cf
-- Generates:
--  * Abstract syntax implementation in Haskell
--  * Happy parser generator
--  * Alex lexer generator
--  * pretty printer in Haskell
--  * LaTeX file containing readable language spec


--------------------------------------------
-- RIPL program structure

comment "/*" "*/" ;
comment "//";

entrypoints Program ;

ProgramC. Program ::= [Include] [Function] ImageIn [Assignment] DataOut ;

IncludeFile. Include ::= "#include" "<" Ident ".ripl" ">" ;
separator Include ";" ;

FunctionC. Function ::= "let" Ident [FunArg] "=" [Assignment] Idents ";" ;

-- FunArgIdentC. FunArg ::= Ident ;
FunArgConstC. FunArg ::= Integer ;
FunArgExprC. FunArg ::= Exp ;

separator FunArg "" ;
separator Function "" ;

ImageInC. ImageIn ::= Ident "=" "imread" Integer Integer ";" ;

AssignSkelC. Assignment ::= Idents "=" AssignSkelRHS ;
AssignFunCallC. Assignment ::= Idents "=" FunCallRHS ;
DataOutC. DataOut ::= "out" Ident ";" ;

FunCall. FunCallRHS ::= Ident [FunArg] ;

MapSkel. AssignSkelRHS ::= "map" Ident  AnonFunElemUnary ;
-- ImapSkel. AssignSkelRHS ::= "imap" Ident AnonFunIndexed ;
-- UnzipSkel. AssignSkelRHS ::= "unzip" Ident AnonFun ;
-- IUnzipSkel. AssignSkelRHS ::= "iunzip" Ident AnonFunIndexed AnonFunIndexed ;
-- ConvolveSkel. AssignSkelRHS ::= "convolve" Ident "(" Integer "," Integer ")" KernelValues ;
StencilSkel. AssignSkelRHS ::= "stencil" Ident "(" Integer "," Integer ")" AnonPositionIndexedFun ;
-- IUnzipFilter2DSkel. AssignSkelRHS ::= "iunzipFilter2D" Ident  "(" Integer "," Integer ")" AnonFun AnonFun;
ZipWithSkel. AssignSkelRHS ::= "zipWith" [IdentSpaceSep] AnonFun ;
ZipWithScalarSkel. AssignSkelRHS ::= "zipWithScalar" [IdentSpaceSep] AnonFun ;
ZipWithVectorSkel. AssignSkelRHS ::= "zipWithVector" [IdentSpaceSep] AnonFunBinary ;
-- TransposeSkel. AssignSkelRHS ::= "transpose" Ident ;
ScanSkel. AssignSkelRHS ::= "scan" Ident Integer AnonFunBinary ;
FoldScalarSkel. AssignSkelRHS ::= "foldScalar" Ident Integer AnonFunBinary ;
FoldVectorSkel. AssignSkelRHS ::= "foldVector" Ident Integer Integer AnonFunBinary ;
-- AppendSkel. AssignSkelRHS ::= "append" Ident Ident ;
-- RepeatSkel. AssignSkelRHS ::= "repeat" Ident Exp ;
-- RepeatConstSkel. AssignSkelRHS ::= "repeatConst" Integer Exp ;
ScaleSkel. AssignSkelRHS ::= "scale" "(" Exp "," Exp ")" Ident;
SplitXSkel. AssignSkelRHS ::= "splitX" "(" Exp "," Exp ")" Ident ;
SplitYSkel. AssignSkelRHS ::= "splitY" "(" Exp "," Exp ")" Ident ;

KernelValuesC. KernelValues ::= "{" [KernelValue] "}" ;

KernelValueC. KernelValue ::= Exp ;
separator nonempty KernelValue "," ;

AnonFunIndexedC. AnonFunIndexed ::= "(" "\\" "[.]" "->" Exp ")" ;
AnonFunElemUnaryC. AnonFunElemUnary ::= "(" "\\" Ident "->" Exp ")" ;
AnonFunDiscreteUnaryC. AnonFunDiscreteUnary ::= "(" "\\" VarList "->" ExprList ")" ;
AnonFunDiscreteBinaryC. AnonFunDiscreteBinary ::= "(" "\\" VarList VarList "->" Exp ")" ;

AnonFunBinaryC. AnonFunBinary ::= "(" "\\" Ident Ident "->" Exp ")" ;

AnonPositionIndexedFunC. AnonFun ::= "(" "\\" VarList "(" Integer "," Integer ")" "->" Exp ")" ;

AnonFunC. AnonFun ::= "(" "\\" [ExpSpaceSep] "->" Exp ")" ;
IdentSpaceSepC. IdentSpaceSep ::= Ident ;
separator IdentSpaceSep "" ;

ExpSpaceSepC. ExpSpaceSep ::= Exp ;
separator ExpSpaceSep "" ;

-- AnonFunBinaryC. AnonFunBinary ::= "(" "\\" Ident Ident "->" Exp ")" ;
-- AnonFunBinaryC. AnonFunBinary ::= "(" "\\" Ident Ident "->" Exp ")" ;


VarListC. VarList ::= "[" [Var] "]" ;

IdentsOneId. Idents ::= Ident;
IdentsManyIds. Idents ::= "(" [Ident] ")";
separator nonempty Ident "," ;

ExprIntNeg. Exp ::= "-" Integer ;
ExprInt. Exp ::= Integer ;
ExprVar. Exp ::= Var ;
ExprIndexHere. Exp ::= "[.]";
ExprIndex. Exp ::= "[" VectorIndex "]" ;
ExprIndexedVector. Exp ::= Ident "[" Exp "]" ;
ExprListExprs. Exp ::= ExprList ;
ExprAdd. Exp ::= Exp "+" Exp ;
ExprMinus. Exp ::= Exp "-" Exp ;
ExprMul. Exp ::= Exp "*" Exp ;
ExprDiv. Exp ::= Exp "/" Exp ;
ExprShiftR. Exp ::= Exp ">>" Exp ;
ExprShiftL. Exp ::= Exp "<<" Exp ;
ExprAbs. Exp ::= "abs" Exp ;
ExprMin. Exp ::= "min" Exp Exp ;
ExprMax. Exp ::= "max" Exp Exp ;
ExprGT. Exp ::= Exp ">" Exp ;
ExprGTE. Exp ::= Exp ">=" Exp ;
ExprLT. Exp ::= Exp "<" Exp ;
ExprLTE. Exp ::= Exp "<=" Exp ;
ExprIfThenElse. Exp ::= "if" Exp "then" Exp "else" Exp ;
-- ExprRepeatToken. Exp ::= "repeatPixel" Exp Exp ;
ExprBracketed. Exp ::= "(" Exp ")" ;
ExprsBracketed. Exp ::= "(" [Exp] ")" ;
ExprUndefined. Exp ::= "undefined" ;

ExprRepeatTokensC. ExprList ::= "repeatPixel" Exp Exp ;
ExprListC. ExprList ::= "[" [Exp] "]" ;

-- a special expression for foldVector, e.g.
-- (\pixel hist -> hist[pixel]++)
ExprVectorMod. Exp ::= Ident "[" Exp "]" VectorModifier ;
VectorModIncr. VectorModifier ::= "++";
VectorModDecr. VectorModifier ::= "--";


VarC. Var ::= Ident ;

IndexPlus. VectorIndex ::= "." "+" Integer ;
IndexCenter. VectorIndex ::= "."  ;
IndexMinus. VectorIndex ::= "." "-" Integer ;
PlusMinusP. PlusMinus ::= "+";
PlusMinusM. PlusMinus ::= "-";

separator nonempty Var "," ;
terminator Assignment ";" ;
separator Exp "," ;


-- separator nonempty InputVar "," ;
-- separator ModifierStatement ";" ;
-- separator FunArg "," ;
-- separator nonempty FunCallArg "," ;


-- IteratorOneRHSCons. AssignRHS ::= IteratorOne Ident IteratorBodySingleArity ;
-- IteratorTwoRHSCons. AssignRHS ::= IteratorTwo Ident Ident IteratorBodyDoubleArity ;
-- IteratorTwoBuiltinRHSCons. AssignRHS ::= IteratorTwo Ident Ident IteratorBodyBuiltIn ;
-- IteratorConvolveRHSCons. AssignRHS ::= "convolve" Ident "(" Integer "," Integer ")" IteratorBodySingleArity ;
-- IteratorFoldVectorRHSCons. AssignRHS ::= "foldVector" Ident Integer Integer IteratorBodyDoubleArity ;
-- IteratorFoldScalarRHSCons. AssignRHS ::= "foldScalar" Ident Integer IteratorBodyDoubleArity ;

-- ImReadRHSCons. AssignRHS ::= "imread" "(" String "," Integer "," Integer ")" ;
-- FunCallRHSCons. AssignRHS ::= Ident "(" [FunCallArg] ")" ;
-- ExpRHSCons. AssignRHS ::= Exp ;

-- -- these are hidden, but used in RIPL IR.
-- ReorderRowToColumn. AssignRHS ::= "reorderRowToColumn" "(" Ident ")" ;
-- ReorderColumnToRow. AssignRHS ::= "reorderColumnToRow" "(" Ident ")" ;

-- FunCallArgCons. FunCallArg ::= Ident ;

-- MapRowCons. IteratorOne ::= "mapRow" ;
-- MapColumnCons. IteratorOne ::= "mapColumn" ;
-- ConcatMapRowCons. IteratorOne ::= "concatMapRow" ;
-- ConcatMapColumnCons. IteratorOne ::= "concatMapColumn" ;
-- ZipWithRowCons. IteratorTwo ::= "zipWithRow" ;
-- ZipWithColumnCons. IteratorTwo ::= "zipWithColumn" ;
-- CombineRowCons. IteratorTwo ::= "combineRow" ;
-- CombineColumnCons. IteratorTwo ::= "combineColumn" ;


-- -- FoldCons. IteratorOne ::= "fold" ;

-- UserDefinedBodySingleCons. IteratorBodySingleArity ::= "(" "\\" InputPattern "->" OutputModifier ")" ;
-- UserDefinedBodyDoubleCons. IteratorBodyDoubleArity ::= "(" "\\" InputPattern InputPattern "->" OutputModifier ")" ;
-- BuiltinSkelFunCons. IteratorBodyBuiltIn ::= BuiltInFun ;

-- AppendBuiltIn. BuiltInFun ::= "append" ;

-- -- ModifierModify. ModifierType ::= "modify" ;
-- -- ModifierKeep. ModifierType ::= "keep" ;

-- InputPatternCons. InputPattern ::= [InputVar] ;

-- InputListCons. InputVar ::= "[" [VarCommaSeparated] "]" ;
-- InputVarCons. InputVar ::= Ident ;

-- VarIdent. VarCommaSeparated ::= Ident ;
-- VarInt.   VarCommaSeparated ::= Integer ;

-- OutputModifyCons. OutputModifier ::= "modify" [ModifierStatement] ;
-- OutputKeepCons. OutputModifier ::= "[" [VarCommaSeparated] "]" ;
-- OutputExpCons. OutputModifier ::= "[" [Exp] "]" ;

-- ModifierStatementCons. ModifierStatement ::= Ident ":=" IteratorModifierRHS ;
-- ModifierArrStatementCons. ModifierStatement ::= Ident "[" Ident "]" ":=" IteratorModifierRHS ;

-- ModifierExpRHS. IteratorModifierRHS ::= Exp ;
-- ModifierFunCallRHS. IteratorModifierRHS ::= Ident "(" [FunCallArg] ")" ;

-- IfThenElseExpCons. Exp ::= "if" Exp "then" Exp "else" Exp ;
-- AddExpCons. Exp ::= Exp "+" Exp1 ;
-- NegExpCons. Exp ::= Exp "-" Exp1 ;
-- ShiftRightExpCons. Exp1 ::= Exp1 ">>" Exp2 ;
-- ShiftLeftExpCons. Exp1 ::= Exp1 "<<" Exp2 ;
-- CmpGT. Exp1 ::= Exp1 ">" Exp2 ;
-- CmpLT. Exp1 ::= Exp1 "<" Exp2 ;
-- IdentExpCons. Exp2 ::= Ident ;
-- IdentArrIdxExpCons. Exp2 ::= Ident "[" Ident "]" ;
-- IntExpCons. Exp2 ::= Integer ;

-- coercions Exp 2 ;
