-- RIPL labelled BNF.
-- Rathlin Image Processing Language, Part of the Rathlin project.
--
-- Usage: $ bnfc -m -haskell RIPL.cf
-- Generates:
--  * Abstract syntax implementation in Haskell
--  * Happy parser generator
--  * Alex lexer generator
--  * pretty printer in Haskell
--  * LaTeX file containing readable language spec

--------------------------------------------
-- RIPL program structure

comment "/*" "*/" ;
comment "//";

entrypoints Program ;

ProgramC. Program ::= [Include] [Function] ImageIn [Assignment] DataOut ;

IncludeFile. Include ::= "#include" "<" Ident ".ripl" ">" ;
separator Include ";" ;

FunctionC. Function ::= "let" Ident [FunArg] "=" [Assignment] Idents ";" ;
FunArgExprC. FunArg ::= Exp ;

separator FunArg "" ;
separator Function "" ;

ImageInC. ImageIn ::= Ident "=" "imread" ColourType Integer Integer ";" ;

ColourTypeRGB. ColourType ::= "RGB";
ColourTypeGray. ColourType ::= "Gray";

AssignSkelC. Assignment ::= Idents "=" AssignSkelRHS ;
AssignFunCallC. Assignment ::= Idents "=" FunCallRHS ;
DataOutC. DataOut ::= "out" Ident ";" ;

FunCall. FunCallRHS ::= Ident [FunArg] ;

MapSkel. AssignSkelRHS ::= "map" Ident OneVarFun ;
ZipWithSkel. AssignSkelRHS ::= "zipWith" [IdentSpaceSep] ManyVarFun ;
ZipWithScalarSkel. AssignSkelRHS ::= "zipWith" "[" Exp ".." "]" Ident TwoVarFun ;

-- ZipWithScalarSkel. AssignSkelRHS ::= "zipWithScalar" [IdentSpaceSep] TwoVarFun ;
-- ZipWithVectorSkel. AssignSkelRHS ::= "zipWithVector" [IdentSpaceSep] TwoVarFun ;
ScanSkel. AssignSkelRHS ::= "scan" Ident Integer TwoVarFun ;
FoldSkel. AssignSkelRHS ::= "fold" Exp Exp TwoVarProc ;
FoldScalarSkel. AssignSkelRHS ::= "foldScalar" Ident Integer TwoVarFun ;
FoldVectorSkel. AssignSkelRHS ::= "foldVector" Ident Integer Integer TwoVarFun ;
ScaleSkel. AssignSkelRHS ::= "scale" "(" Exp "," Exp ")" Ident;
SplitXSkel. AssignSkelRHS ::= "splitX" Integer Ident ;
SplitYSkel. AssignSkelRHS ::= "splitY" Integer Ident ;
Stencil1DSkel. AssignSkelRHS ::= "stencil" Ident "(" Integer "," Integer ")" Stencil1DFun ;
Stencil2DSkel. AssignSkelRHS ::= "stencil" Ident "(" Integer "," Integer ")" Stencil2DFun ;

OneVarFunC.   OneVarFun ::= "(" "\\" Idents "->" Exp ")" ;
TwoVarFunC.   TwoVarFun ::= "(" "\\" Idents Idents "->" Exp ")" ;
ManyVarFunC. ManyVarFun ::= "(" "\\" [IdentSpaceSep] "->" Exp ")" ;

-- for fold
TwoVarProcC.   TwoVarProc ::= "(" "\\" Idents Idents "->" [Statement] ")" ;

IdentSpaceSepC. IdentSpaceSep ::= Idents ;
separator IdentSpaceSep "" ;

Stencil1DFunC. Stencil1DFun ::= "(" "\\" "[.]" "(" Ident ")" "->" Exp ")" ;
Stencil2DFunC. Stencil2DFun ::= "(" "\\" VarList "(" Ident "," Ident ")" "->" Exp ")" ;

-- ExpSpaceSepC. ExpSpaceSep ::= Exp ;
-- separator ExpSpaceSep "" ;

VarListC. VarList ::= [Var] ;
separator nonempty Var "" ;

IdentsOneId. Idents ::= Ident;
IdentsManyIds. Idents ::= "(" [Ident] ")";
separator nonempty Ident "," ;


ExprGT. Exp1 ::= Exp1 ">" Exp2 ;
ExprGTE. Exp1 ::= Exp1 ">=" Exp2 ;
ExprLT. Exp1 ::= Exp1 "<" Exp2 ;
ExprLTE. Exp1 ::= Exp1 "<=" Exp2 ;
ExprEq. Exp1 ::= Exp1 "==" Exp2 ;
ExprNEq. Exp1 ::= Exp1 "!=" Exp2 ;
ExprAdd. Exp2 ::= Exp2 "+" Exp3 ;
ExprMinus. Exp2 ::= Exp2 "-" Exp3 ;
ExprMul. Exp3 ::= Exp3 "*" Exp4 ;
ExprDiv. Exp3 ::= Exp3 "/" Exp4 ;
ExprMod. Exp3 ::= Exp3 "%" Exp4 ;
ExprShiftR. Exp4 ::= Exp4 ">>" Exp5 ;
ExprShiftL. Exp4 ::= Exp4 "<<" Exp5 ;
ExprAnd. Exp4 ::= Exp4 "and" Exp5 ;
ExprAbs. Exp5 ::= "abs" Exp6 ;
ExprMin. Exp5 ::= "min" Exp5 Exp6 ;
ExprMax. Exp5 ::= "max" Exp5 Exp6 ;
ExprIfThenElse. Exp6 ::= "if" Exp6 "then" Exp7 "else" Exp7 ;
ExprTuple. Exp7 ::= "(" [Exp] ")" ;
ExprIdx. Exp7 ::= "[" Exp "]" ;
ExprIdxArray. Exp7 ::= Ident ExprList ;
-- ExprListExprs. Exp7 ::= ExprList ;
-- ExprBracketed. Exp8 ::= "(" Exp9 ")" ;
-- ExprsBracketed. Exp9 ::= "(" [Exp] ")" ;

ExprIndexHere. Exp8 ::= "[.]";
ExprIndex. Exp8 ::= "[" VectorIndex "]" ;
ExprIndexedVector. Exp8 ::= Ident "[" Exp9 "]" ;
ExprInt. Exp9 ::= Integer ;
ExprFalse. Exp9 ::= "false";
ExprTrue. Exp9 ::= "true";
ExprVar. Exp9 ::= Var ; -- switch to just Ident
-- ExprIdentArray. Exp9 ::= Ident [Index] ;
ExprIntNeg. Exp9 ::= "-" Integer ;
ExprGenArray. Exp10 ::= "genarray" Exp ;
ExprRangeArray. Exp10 ::= "range" Exp ;
ExprGenRGB. Exp10 ::= "rgb" Exp ;


ExprUndefined. Exp ::= "undefined" ;

coercions Exp 10;

-- Idx. Index ::= "[" Exp9 "]";
-- separator Index "";

-- ExprRepeatTokensC. ExprList ::= "repeatPixel" Exp Exp ;
ExprListC. ExprList ::= "[" [Exp] "]" ;

VarC. Var ::= Ident ;

-- a special expression for foldVector, e.g.
-- (\pixel hist -> hist[pixel]++)
-- ExprVectorMod. Exp ::= Ident "[" Exp "]" VectorModifier ;

VarModIncr. VarModifier ::= "++";
VarModDecr. VarModifier ::= "--";
IndexPlus. VectorIndex ::= "." "+" Integer ;
IndexCenter. VectorIndex ::= "."  ;
IndexMinus. VectorIndex ::= "." "-" Integer ;

-- statements

StmtIfThen. Statement ::= "if" Exp "{" [Statement] "}" ;
StmtWhile. Statement ::= "while" Exp "{" [Statement] "}" ;
StmtFor. Statement ::= "for"  Ident "in" "range" "(" Exp "," Exp ")" "{" [Statement] "}" ;
StmtAssignVar. Statement ::= Ident "=" Exp ";" ;
StmtAssignIncrVar. Statement ::= Ident "+=" Exp ";" ;
StmtAssignDecrVar. Statement ::= Ident "-=" Exp ";" ;
StmtAssignIncrVector. Statement ::= Ident ExprList "+=" Exp ";" ;
StmtAssignDecrVector. Statement ::= Ident ExprList "-=" Exp ";" ;
StmtAssignArray. Statement ::= Ident ExprList "=" Exp ";" ;
StmtVectorMod. Statement ::= Ident ExprList VarModifier ";" ;
StmtScalarMod. Statement ::= Ident VarModifier ";" ;
StmtVarDecl. Statement ::= Type [Ident] ";" ;

TypeInt. Type ::= "int";
TypeBool. Type ::= "bool";

separator Statement "" ;

-- separator nonempty Var "," ;
terminator Assignment ";" ;
separator Exp "," ;