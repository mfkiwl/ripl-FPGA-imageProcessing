-- RIPL labelled BNF.
-- Rathlin Image Processing Language, Part of the Rathlin project.
--
-- Usage: $ bnfc -m -haskell RIPL.cf
-- Generates:
--  * Abstract syntax implementation in Haskell
--  * Happy parser generator
--  * Alex lexer generator
--  * pretty printer in Haskell
--  * LaTeX file containing readable language spec

--------------------------------------------
-- RIPL program structure

comment "/*" "*/" ;
comment "//";

entrypoints Program ;

ProgramC. Program ::= [Include] [Function] ImageIn [Assignment] DataOut ;

IncludeFile. Include ::= "#include" "<" Ident ".ripl" ">" ;
separator Include ";" ;

FunctionC. Function ::= "let" Ident [FunArg] "=" [Assignment] Idents ";" ;
FunArgExprC. FunArg ::= Exp ;

separator FunArg "" ;
separator Function "" ;

ImageInC. ImageIn ::= Ident "=" "imread" ColourType Integer Integer ";" ;

ColourTypeRGB. ColourType ::= "RGB";
ColourTypeGray. ColourType ::= "Gray";

AssignSkelC. Assignment ::= Idents "=" AssignSkelRHS ;
AssignFunCallC. Assignment ::= Idents "=" FunCallRHS ;
DataOutC. DataOut ::= "out" Ident ";" ;

FunCall. FunCallRHS ::= Ident [FunArg] ;

MapSkel. AssignSkelRHS ::= "map" Ident OneVarFun ;
ZipWithSkel. AssignSkelRHS ::= "zipWith" [IdentSpaceSep] ManyVarFun ;
ZipWithScalarSkel. AssignSkelRHS ::= "zipWith" "[" Exp ".." "]" Ident TwoVarFun ;

-- ZipWithScalarSkel. AssignSkelRHS ::= "zipWithScalar" [IdentSpaceSep] TwoVarFun ;
-- ZipWithVectorSkel. AssignSkelRHS ::= "zipWithVector" [IdentSpaceSep] TwoVarFun ;
ScanSkel. AssignSkelRHS ::= "scan" Ident Integer TwoVarFun ;
FoldSkel. AssignSkelRHS ::= "fold" Exp Exp TwoVarFun ;
FoldScalarSkel. AssignSkelRHS ::= "foldScalar" Ident Integer TwoVarFun ;
FoldVectorSkel. AssignSkelRHS ::= "foldVector" Ident Integer Integer TwoVarFun ;
ScaleSkel. AssignSkelRHS ::= "scale" "(" Exp "," Exp ")" Ident;
SplitXSkel. AssignSkelRHS ::= "splitX" Integer Ident ;
SplitYSkel. AssignSkelRHS ::= "splitY" Integer Ident ;
Stencil1DSkel. AssignSkelRHS ::= "stencil" Ident "(" Integer "," Integer ")" Stencil1DFun ;
Stencil2DSkel. AssignSkelRHS ::= "stencil" Ident "(" Integer "," Integer ")" Stencil2DFun ;

OneVarFunC.   OneVarFun ::= "(" "\\" Idents "->" Exp ")" ;
TwoVarFunC.   TwoVarFun ::= "(" "\\" Idents Idents "->" Exp ")" ;
ManyVarFunC. ManyVarFun ::= "(" "\\" [IdentSpaceSep] "->" Exp ")" ;
IdentSpaceSepC. IdentSpaceSep ::= Idents ;
separator IdentSpaceSep "" ;

Stencil1DFunC. Stencil1DFun ::= "(" "\\" "[.]" "(" Ident ")" "->" Exp ")" ;
Stencil2DFunC. Stencil2DFun ::= "(" "\\" VarList "(" Ident "," Ident ")" "->" Exp ")" ;

ExpSpaceSepC. ExpSpaceSep ::= Exp ;
separator ExpSpaceSep "" ;

VarListC. VarList ::= [Var] ;
separator nonempty Var "" ;

IdentsOneId. Idents ::= Ident;
IdentsManyIds. Idents ::= "(" [Ident] ")";
separator nonempty Ident "," ;

ExprGT. Exp2 ::= Exp2 ">" Exp3 ;
ExprGTE. Exp2 ::= Exp2 ">=" Exp3 ;
ExprLT. Exp2 ::= Exp2 "<" Exp3 ;
ExprLTE. Exp2 ::= Exp2 "<=" Exp3 ;
ExprEq. Exp2 ::= Exp2 "==" Exp3 ;
ExprAdd. Exp3 ::= Exp3 "+" Exp4 ;
ExprMinus. Exp3 ::= Exp3 "-" Exp4 ;
ExprMul. Exp4 ::= Exp4 "*" Exp5 ;
ExprDiv. Exp4 ::= Exp4 "/" Exp5 ;
ExprMod. Exp4 ::= Exp4 "%" Exp5 ;
ExprShiftR. Exp5 ::= Exp5 ">>" Exp6 ;
ExprShiftL. Exp5 ::= Exp5 "<<" Exp6 ;
ExprAbs. Exp6 ::= "abs" Exp7 ;
ExprMin. Exp6 ::= "min" Exp6 Exp7 ;
ExprMax. Exp6 ::= "max" Exp6 Exp7 ;
ExprIfThenElse. Exp7 ::= "if" Exp7 "then" Exp8 "else" Exp8 ;
ExprTuple. Exp8 ::= "(" [Exp] ")" ;
-- ExprBracketed. Exp8 ::= "(" Exp9 ")" ;
-- ExprsBracketed. Exp9 ::= "(" [Exp] ")" ;

ExprIndexHere. Exp9 ::= "[.]";
ExprIndex. Exp9 ::= "[" VectorIndex "]" ;
ExprIndexedVector. Exp9 ::= Ident "[" Exp10 "]" ;
ExprInt. Exp10 ::= Integer ;
ExprVar. Exp10 ::= Var ; -- switch to just Ident
ExprIntNeg. Exp10 ::= "-" Integer ;
ExprGenArray. Exp11 ::= "genarray" Exp ;
ExprRangeArray. Exp11 ::= "range" Exp ;

ExprListExprs. Exp ::= ExprList ;
ExprUndefined. Exp ::= "undefined" ;

coercions Exp 11;

-- ExprRepeatTokensC. ExprList ::= "repeatPixel" Exp Exp ;
ExprListC. ExprList ::= "[" [Exp] "]" ;

-- a special expression for foldVector, e.g.
-- (\pixel hist -> hist[pixel]++)
-- ExprVectorMod. Exp ::= Ident "[" Exp "]" VectorModifier ;
ExprVectorMod. Exp ::= Ident ExprList VectorModifier ;
VectorModIncr. VectorModifier ::= "++";
VectorModDecr. VectorModifier ::= "--";


VarC. Var ::= Ident ;

IndexPlus. VectorIndex ::= "." "+" Integer ;
IndexCenter. VectorIndex ::= "."  ;
IndexMinus. VectorIndex ::= "." "-" Integer ;

-- separator nonempty Var "," ;
terminator Assignment ";" ;
separator Exp "," ;